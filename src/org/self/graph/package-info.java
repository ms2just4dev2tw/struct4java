/**
 * <h2>图</h2>
 * 无论图多么复杂，都可以由两个集合V(Vertex)和·E(Edge)组成
 * <p>
 * Vertex是图的顶点集合，Edge是图的两个不同顶点的边的集合
 * <p>
 * <h3>1，端点和邻接点</h3>
 * 无向图中，一条边<i，j>的顶点 i，j 是该边的两个端点，i，j 互为邻接点
 * <p>
 * 有向图中，一条边<i，j>，顶点 i，j 分别为此边的起始和终止终止端点，i是j的入边邻接点，j是i的出边邻接点
 * <p>
 * <h3>2，顶点的度，入度和出度</h3>
 * 无向图中，某顶点所具有的边的数目为该顶点的度
 * <p>
 * 有向图中，以顶点 i 为终点的边的数目是 i 的入度，以顶点 i 为起点的边的数目是 i 的出度
 * <p>
 * <h3>3，完全图</h3>
 * 无向图中每两个顶点之间都有一条边
 * <p>
 * 有向图中每两个顶点都存在两条方向相反的边，则为完全图
 * <h3>4，子图</h3>
 * 有两个图G=(V,E)，G=(V',E')，如果V'是V的子集，E'是E的子集，则G'是G的子图
 * <p>
 * <h3>5，路径和路径长度，回路或环</h3>
 * 从顶点 i 到顶点 j 的一个顶点序列是路径，路径经过的边的数目是这条路径的长度
 * <p>
 * 若一条路径上除开始点和结束点可以为同一顶点外，其余顶点各不相同，则为简单回路或环
 * <p>
 * 一条路径上开始点和结束点为同一顶点，则这条路径为回路或环
 * <p>
 * 简单路径为回路时，称为简单回路或简单环
 * <p>
 * <h3>6，无向图的连通，连通图和连通分量</h3>
 * 无向图中，两个顶点之间存在路径，那么这两个顶点是连通的，连通图是任意两个顶点都是连通的
 * <p>
 * 无向图的极大连通子图就是一个连通分量，连通图的连通分量就是本身，非连通图则有多个
 * <p>
 * <h3>7，有向图的连通，强连通图和强连通分量</h3>
 * <p>
 * 有向图中，任意两个顶点都是相互连通的，那么这个图是强连通图。
 * <p>
 * 有向图的极大强连通子图是它的强连通分量，强连通图只有一个强连通分量，而非强连通图有多个
 * <p>
 * <h3>8，关节点和重连通图 </h3>
 * 在删除图的一个顶点 i 以及与其相关的边之后，图的一个连通分量被分割成多个连通分量，
 * <p>
 * 那么顶点 i 是图的关节点。一个没有关节点的连通图称为重连通图
 * <p>
 * <h3>9，权和网</h3>
 * 图中每条边上带有的数值称为权，边上带有权的图称为带权图，又叫网
 * <p>
 * <h3>10，图的存储结构</h3>
 * 10.1，邻接矩阵存储方式
 * <p>
 * 10.2，邻接链表存储方式
 * <p>
 * <h3>11，图的遍历方式</h3>
 * 11.1，深度优先遍历
 * <p>
 * 11.2，广度优先遍历
 * <p>
 */
package org.self.graph;
